To build and flash ESP32/esp-idf:

  $ make esp32-flash port=/dev/ttyUSBx

To build and flash ESP8266/nonos:

  $ make esp8266-flash ESPPORT=/dev/ttyUSBx


Variables:

port=  ESP32 USB port to flash to (default: /dev/ttyUSB0)
ESPPORT= ESP8266 port to flash to (default: /dev/ttyUSB0)
ESPTOOL= ESP8266 path to esptool.py  (dfault: esptool.py)

BUILD_DIR_BASE=  build dir for esp32 or esp8266
TEST_BUILD_DIR_BASE=  build dir for esp32 unit tests


Targets:

clean:
all:
http_proxy: start HTTP proxy for developing HTTP content and updating FHEM modules

esp32-all:   build esp32 firmware
esp32-clean: delete built esp32 files
esp32-lan:   build esp32 firmware with LAN support
esp32-flash: write flash

esp32-ocd: run openocd server
esp32-ocd-loop: run openocd server in a loop, so it will wait and restart after e.g. flash-ocd is done
esp32-flash-ocd: kill running openocd server and openocd to write to flash
esp32-flash-ocd: ...like above, but write app-image only

esp32-test-build: build test firmware
esp32-test-flash: build and flash test firmware
esp32-test-run: run python script to check test results
esp32-test-all: build, flash and run tests



esp8266-erase:       optional erases flash. any configuration data and stored files are lost
esp8266-flashinit:   required after erase. rewrites some calibration and blank data (can fix a boot-loop)
esp8266-flash:       build and flash
